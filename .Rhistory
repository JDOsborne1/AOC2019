select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.1 = rowname)
path_lengths_2 <- input_path_2 %>%
select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.2 = rowname)
intersections %>%
left_join(path_lengths_1, by = "str.value") %>%
left_join(path_lengths_2, by = "str.value") %>%
mutate(total.path.length = min.path.length.1 + min.path.length.2)
intersections %>%
left_join(path_lengths_1, by = "str.value") %>%
left_join(path_lengths_2, by = "str.value") %>%
mutate(total.path.length = min.path.length.1 + min.path.length.2) %>%
select(str.value, total.path.length)
intersections %>%
left_join(path_lengths_1, by = "str.value") %>%
left_join(path_lengths_2, by = "str.value") %>%
mutate(total.path.length = min.path.length.1 + min.path.length.2) %>%
select(str.value, total.path.length) %>%
filter(total.path.length == min(total.path.length)) %>%
pull(total.path.length) %>%
as.integer()
test()
#' Determine the crossing points of two instruction strings
#'
#' @param input_string_1 the first instruction string
#' @param input_string_2 the second instruction string
#'
#' @return
#' @export
#'
#' @examples
day3DetermineShortestPath <- function(input_string_1, input_string_2){
input_path_1 <- paths$path_1 %>%
day3GetPathFromString() %>%
mutate(str.value = as.character(value))
input_path_2 <- paths$path_2 %>%
day3GetPathFromString() %>%
mutate(str.value = as.character(value))
intersections <- input_path_1 %>%
select(-value) %>%
inner_join(input_path_2, by = "str.value") %>%
filter(str.value != "c(0, 0)")
path_lengths_1 <- input_path_1 %>%
select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.1 = rowname)
path_lengths_2 <- input_path_2 %>%
select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.2 = rowname)
intersections %>%
left_join(path_lengths_1, by = "str.value") %>%
left_join(path_lengths_2, by = "str.value") %>%
mutate(total.path.length = min.path.length.1 + min.path.length.2) %>%
select(str.value, total.path.length) %>%
filter(total.path.length == min(total.path.length)) %>%
pull(total.path.length) %>%
as.integer()
}
test()
day3DetermineShortestPath(
input_string1
,
input_string2
)
day3DetermineShortestPath(
"R75,D30,R83,U83,L12,D49,R71,U7,L72"
,
"U62,R66,U55,R34,D71,R55,D58,R83 "
)
source('~/RLibrary/AOC2019/R/Day_3.R')
day3DetermineShortestPath(
"R75,D30,R83,U83,L12,D49,R71,U7,L72"
,
"U62,R66,U55,R34,D71,R55,D58,R83 "
)
#' Determine the crossing points of two instruction strings
#'
#' @param input_string_1 the first instruction string
#' @param input_string_2 the second instruction string
#'
#' @return
#' @export
#'
#' @examples
day3DetermineShortestPath <- function(input_string_1, input_string_2){
input_path_1 <- input_string_1 %>%
day3GetPathFromString() %>%
mutate(str.value = as.character(value))
input_path_2 <- input_string_2 %>%
day3GetPathFromString() %>%
mutate(str.value = as.character(value))
intersections <- input_path_1 %>%
select(-value) %>%
inner_join(input_path_2, by = "str.value") %>%
filter(str.value != "c(0, 0)")
path_lengths_1 <- input_path_1 %>%
select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.1 = rowname)
path_lengths_2 <- input_path_2 %>%
select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.2 = rowname)
intersections %>%
left_join(path_lengths_1, by = "str.value") %>%
left_join(path_lengths_2, by = "str.value") %>%
mutate(total.path.length = min.path.length.1 + min.path.length.2) %>%
select(str.value, total.path.length) %>%
filter(total.path.length == min(total.path.length)) %>%
pull(total.path.length) %>%
as.integer()
}
day3DetermineShortestPath(
"R75,D30,R83,U83,L12,D49,R71,U7,L72"
,
"U62,R66,U55,R34,D71,R55,D58,R83 "
)
input_string_1 = "R75,D30,R83,U83,L12,D49,R71,U7,L72"
input_string_2 = "U62,R66,U55,R34,D71,R55,D58,R83"
day3DetermineShortestPath(
input_string_1 = "R75,D30,R83,U83,L12,D49,R71,U7,L72"
,
input_string_2 = "U62,R66,U55,R34,D71,R55,D58,R83"
)
path_lengths_1 <- input_path_1 %>%
select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
mutate_at(vars(rowname), function(x) x - 1L) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.1 = rowname)
path_lengths_2 <- input_path_2 %>%
select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
mutate_at(vars(rowname), function(x) x - 1L) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.2 = rowname)
#' Determine the crossing points of two instruction strings
#'
#' @param input_string_1 the first instruction string
#' @param input_string_2 the second instruction string
#'
#' @return
#' @export
#'
#' @examples
day3DetermineShortestPath <- function(input_string_1, input_string_2){
input_path_1 <- input_string_1 %>%
day3GetPathFromString() %>%
mutate(str.value = as.character(value))
input_path_2 <- input_string_2 %>%
day3GetPathFromString() %>%
mutate(str.value = as.character(value))
intersections <- input_path_1 %>%
select(-value) %>%
inner_join(input_path_2, by = "str.value") %>%
filter(str.value != "c(0, 0)")
path_lengths_1 <- input_path_1 %>%
select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
mutate_at(vars(rowname), function(x) x - 1L) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.1 = rowname)
path_lengths_2 <- input_path_2 %>%
select(-value) %>%
tibble::rownames_to_column() %>%
filter(str.value %in% intersections$str.value) %>%
mutate_at(vars(rowname), as.integer) %>%
mutate_at(vars(rowname), function(x) x - 1L) %>%
group_by(str.value) %>%
filter(rowname == min(rowname)) %>%
ungroup() %>%
rename(min.path.length.2 = rowname)
intersections %>%
left_join(path_lengths_1, by = "str.value") %>%
left_join(path_lengths_2, by = "str.value") %>%
mutate(total.path.length = min.path.length.1 + min.path.length.2) %>%
select(str.value, total.path.length) %>%
filter(total.path.length == min(total.path.length)) %>%
pull(total.path.length) %>%
as.integer()
}
day3DetermineShortestPath(
input_string_1 = "R75,D30,R83,U83,L12,D49,R71,U7,L72"
,
input_string_2 = "U62,R66,U55,R34,D71,R55,D58,R83"
)
test()
test()
day3DetermineShortestPath(
input_string1 = paths$path_1
,
input_string2 = paths$path_2
)
day3DetermineShortestPath(
input_string_1 = paths$path_1
,
input_string_2 = paths$path_2
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(AOC2019)
library(dplyr)
paths <- here::here("data-raw/Day_3/input") %>%
vroom::vroom(delim = "\n", col_names = "path") %>%
tibble::rownames_to_column(var = "path_number") %>%
mutate_at(vars(path_number), function(x) paste0("path_", x)) %>%
tidyr::spread(key = path_number, value = path)
#tidyr::pivot_wider(names_from = path_number, values_from = path)
day3DetermineClosestCrossover(
input_string1 = paths$path_1
,
input_string2 = paths$path_2
)
day3DetermineShortestPath(
input_string_1 = paths$path_1
,
input_string_2 = paths$path_2
)
document()
library(AOC2019)
library(dplyr)
tibble(num_1 = 1:9) %>%
fuzzy_inner_join(tibble(num_2 = 1:9), by = c("num_1" = "num_2"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_3 = 1:9), by = c("num_2" = "num_3"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_4 = 1:9), by = c("num_3" = "num_4"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_5 = 1:9), by = c("num_4" = "num_5"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_6 = 1:9), by = c("num_5" = "num_6"), match_fun = `<=`) %>%
mutate_all(as.character) %>%
mutate(combo = paste0(num_1, num_2, num_3, num_4, num_5, num_6)) %>%
mutate(combo_val = as.integer(combo)) %>%
filter(combo_val >= lower_bound, combo_val <= upper_bound) %>%
select(combo)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(AOC2019)
library(dplyr)
library(fuzzyjoin)
install.packages("fuzzyjoin")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(AOC2019)
library(dplyr)
library(fuzzyjoin)
# test_sequence <- c(1,1,1,1,1,1)
# test_sequence2 <- c(1,1,1,2,1,2)
#
# as.integer(test_sequence[0] - 1)
#
# test_sequence2 %>%
#   day4CheckSequenceMonotonicity()
# test_sequence2 %>%
#   day4CheckSequenceLength()
# test_sequence2 %>%
#   day4CheckSequenceRange(0, 1000000)
# test_sequence2 %>%
#   day4CheckSequenceDouble()
#
#
test_set_of_sequences <- tibble::tribble(~sequence,
"111111",
"112112",
"123456",
"23",
"224421"                                         )
#
# test_set_of_checks <- test_set_of_sequences %>%
#   mutate(
#     vector_of_values = purrr::map(sequence, day4VectorSplitSequence)
#     ) %>%
#   mutate(
#     Check.Monotonicity = purrr::map(vector_of_values, day4CheckSequenceMonotonicity)
#     ) %>%
#   mutate(
#     Check.Length = purrr::map(vector_of_values, day4CheckSequenceLength)
#     ) %>%
#   mutate(
#     Check.Range = purrr::map(vector_of_values, day4CheckSequenceRange, min_val = 0, max_val = 1000000)
#     ) %>%
#   mutate(
#     Check.Double = purrr::map(vector_of_values, day4CheckSequenceDouble)
#     ) %>%
#   select(
#     -vector_of_values
#     ) %>%
#   tidyr::unnest(
#     cols = c(Check.Monotonicity, Check.Length, Check.Range, Check.Double)
#     )
#
#
# test_set_of_checks%>%
#   group_by(sequence) %>%
#   summarise(Check.Pass = all(Check.Monotonicity, Check.Length, Check.Range, Check.Double))
#
test_set_of_checks2 <- test_set_of_sequences %>%
mutate(vector_to_check = purrr::map(sequence, day4VectorSplitSequence)) %>%
mutate(
Check.Pass = purrr::map(vector_to_check, day4CheckSequence, min_val = 0, max_val = 1000000)
)
source('~/RLibrary/AOC2019/R/Day_4.R')
# test_sequence <- c(1,1,1,1,1,1)
# test_sequence2 <- c(1,1,1,2,1,2)
#
# as.integer(test_sequence[0] - 1)
#
# test_sequence2 %>%
#   day4CheckSequenceMonotonicity()
# test_sequence2 %>%
#   day4CheckSequenceLength()
# test_sequence2 %>%
#   day4CheckSequenceRange(0, 1000000)
# test_sequence2 %>%
#   day4CheckSequenceDouble()
#
#
test_set_of_sequences <- tibble::tribble(~sequence,
"111111",
"112112",
"123456",
"23",
"224421"                                         )
#
# test_set_of_checks <- test_set_of_sequences %>%
#   mutate(
#     vector_of_values = purrr::map(sequence, day4VectorSplitSequence)
#     ) %>%
#   mutate(
#     Check.Monotonicity = purrr::map(vector_of_values, day4CheckSequenceMonotonicity)
#     ) %>%
#   mutate(
#     Check.Length = purrr::map(vector_of_values, day4CheckSequenceLength)
#     ) %>%
#   mutate(
#     Check.Range = purrr::map(vector_of_values, day4CheckSequenceRange, min_val = 0, max_val = 1000000)
#     ) %>%
#   mutate(
#     Check.Double = purrr::map(vector_of_values, day4CheckSequenceDouble)
#     ) %>%
#   select(
#     -vector_of_values
#     ) %>%
#   tidyr::unnest(
#     cols = c(Check.Monotonicity, Check.Length, Check.Range, Check.Double)
#     )
#
#
# test_set_of_checks%>%
#   group_by(sequence) %>%
#   summarise(Check.Pass = all(Check.Monotonicity, Check.Length, Check.Range, Check.Double))
#
test_set_of_checks2 <- test_set_of_sequences %>%
mutate(vector_to_check = purrr::map(sequence, day4VectorSplitSequence)) %>%
mutate(
Check.Pass = purrr::map(vector_to_check, day4CheckSequence, min_val = 0, max_val = 1000000)
)
upper_bound <- 191919
lower_bound <- 100000
tibble(num_1 = 1:9) %>%
fuzzy_inner_join(tibble(num_2 = 1:9), by = c("num_1" = "num_2"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_3 = 1:9), by = c("num_2" = "num_3"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_4 = 1:9), by = c("num_3" = "num_4"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_5 = 1:9), by = c("num_4" = "num_5"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_6 = 1:9), by = c("num_5" = "num_6"), match_fun = `<=`) %>%
mutate_all(as.character) %>%
mutate(combo = paste0(num_1, num_2, num_3, num_4, num_5, num_6)) %>%
mutate(combo_val = as.integer(combo)) %>%
filter(combo_val >= lower_bound, combo_val <= upper_bound) %>%
select(combo)
combos <- tibble(num_1 = 1:9) %>%
fuzzy_inner_join(tibble(num_2 = 1:9), by = c("num_1" = "num_2"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_3 = 1:9), by = c("num_2" = "num_3"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_4 = 1:9), by = c("num_3" = "num_4"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_5 = 1:9), by = c("num_4" = "num_5"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_6 = 1:9), by = c("num_5" = "num_6"), match_fun = `<=`) %>%
mutate_all(as.character) %>%
mutate(combo = paste0(num_1, num_2, num_3, num_4, num_5, num_6)) %>%
mutate(combo_val = as.integer(combo)) %>%
filter(combo_val >= lower_bound, combo_val <= upper_bound) %>%
select(combo)
combos %>%
mutate(vector_to_check = purrr::map(combo, day4VectorSplitSequence)) %>%
mutate(
Check.Pass = purrr::map(vector_to_check, day4CheckSequence, min_val = 0, max_val = 1000000)
)
combos %>%
mutate(vector_to_check = purrr::map(combo, day4VectorSplitSequence)) %>%
mutate(
Check.Pass = purrr::map(vector_to_check, day4CheckSequence, min_val = 0, max_val = 1000000)
) %>%
select(-vector_to_check) %>%
unnest()
combos %>%
mutate(vector_to_check = purrr::map(combo, day4VectorSplitSequence)) %>%
mutate(
Check.Pass = purrr::map(vector_to_check, day4CheckSequence, min_val = 0, max_val = 1000000)
) %>%
select(-vector_to_check) %>%
tidyr::unnest()
upper_bound <- 240298
lower_bound <- 784956
combos <- tibble(num_1 = 1:9) %>%
fuzzy_inner_join(tibble(num_2 = 1:9), by = c("num_1" = "num_2"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_3 = 1:9), by = c("num_2" = "num_3"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_4 = 1:9), by = c("num_3" = "num_4"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_5 = 1:9), by = c("num_4" = "num_5"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_6 = 1:9), by = c("num_5" = "num_6"), match_fun = `<=`) %>%
mutate_all(as.character) %>%
mutate(combo = paste0(num_1, num_2, num_3, num_4, num_5, num_6)) %>%
mutate(combo_val = as.integer(combo)) %>%
filter(combo_val >= lower_bound, combo_val <= upper_bound) %>%
select(combo)
combos %>%
mutate(vector_to_check = purrr::map(combo, day4VectorSplitSequence)) %>%
mutate(
Check.Pass = purrr::map(vector_to_check, day4CheckSequence, min_val = 0, max_val = 1000000)
) %>%
select(-vector_to_check) %>%
tidyr::unnest()
combos %>%
mutate(vector_to_check = purrr::map(combo, day4VectorSplitSequence)) %>%
mutate(
Check.Pass = purrr::map(vector_to_check, day4CheckSequence, min_val = 0, max_val = 1000000)
) %>%
select(-vector_to_check) %>%
tidyr::unnest()
upper_bound <- 784956
lower_bound <- 240298
combos <- tibble(num_1 = 1:9) %>%
fuzzy_inner_join(tibble(num_2 = 1:9), by = c("num_1" = "num_2"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_3 = 1:9), by = c("num_2" = "num_3"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_4 = 1:9), by = c("num_3" = "num_4"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_5 = 1:9), by = c("num_4" = "num_5"), match_fun = `<=`) %>%
fuzzy_inner_join(tibble(num_6 = 1:9), by = c("num_5" = "num_6"), match_fun = `<=`) %>%
mutate_all(as.character) %>%
mutate(combo = paste0(num_1, num_2, num_3, num_4, num_5, num_6)) %>%
mutate(combo_val = as.integer(combo)) %>%
filter(combo_val >= lower_bound, combo_val <= upper_bound) %>%
select(combo)
combos %>%
mutate(vector_to_check = purrr::map(combo, day4VectorSplitSequence)) %>%
mutate(
Check.Pass = purrr::map(vector_to_check, day4CheckSequence, min_val = 0, max_val = 1000000)
) %>%
select(-vector_to_check) %>%
tidyr::unnest()
combo_set <- combos %>%
mutate(vector_to_check = purrr::map(combo, day4VectorSplitSequence)) %>%
mutate(
Check.Pass = purrr::map(vector_to_check, day4CheckSequence, min_val = 0, max_val = 1000000)
) %>%
select(-vector_to_check) %>%
tidyr::unnest()
combo_set %>% count(Check.Pass)
test()
test()
day4CheckSequence("111111", 0, 1000000)
day4CheckSequence("111111", 0, 100000)
test()
day4CheckSequence(day4VectorSplitSequence("123789"), 0, 1000000)
day4CheckSequence(day4VectorSplitSequence("111111"), 0, 1000000)
test()
